{"version":3,"sources":["dataStructure/page.tsx","components/custom.tsx","pages/firstPage.tsx","pages/sign_up.tsx","pages/sign_in.tsx","components/newTask.tsx","pages/dash_board.tsx","pages/list.tsx","components/menu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Page","CustomTitle","title","color","fontSize","id","mb","CustomTextInput","props","useField","field","meta","type","placeholder","handleBlur","func","className","onBlur","e","undefined","target","value","touched","error","CustomCheckBox","label","defaultChecked","FirstPage","onChange","buttons","SignUp","SignIn","centerContent","spacing","map","b","i","colorScheme","onClick","changePage","emails","Object","keys","localStorage","filter","key","initialValues","firstName","lastName","email","password","passwordConfirm","acceptedTerms","validationSchema","Yup","min","max","required","notOneOf","matches","when","oneOf","onSubmit","values","setSubmitting","resetForm","setTimeout","newUser","fName","lName","pssw","lists","list","setItem","JSON","stringify","DashBoard","console","log","name","isSubmitting","useState","state","setstate","isEmailValid","setIsEmailValid","setState","data","getItem","parse","NewTask","alignSelf","m","pointerEvents","children","Edit","event","Dashboard","newItemField","setNewItemField","newItem","setNewItem","allItems","setAllItems","addText","setAddText","visibility","aux","concat","List","document","getElementById","focus","style","width","backgroundColor","borderRadius","item","margin","Delete","aux1","slice","aux2","length","listNameOld","listName","setListName","option","setOption","ml","mt","size","saveList","draggable","isChecked","defaultIsChecked","borderColor","auxCheck","items","push","Menu","text","page","App","whichPage","currentPage","menu","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.22d75846.chunk.js","sourcesContent":["export enum Page {\r\n    FirstPage = \"First Page\",\r\n    SignUp = \"Sign Up\",\r\n    SignIn = \"Sign In\",\r\n    DashBoard = \"Dashboard\",\r\n    List = \"List\",\r\n}","import {\r\n    useField, \r\n    FieldHookConfig}  from 'formik';\r\nimport {\r\n    Input,\r\n    Checkbox,\r\n    Box,\r\n    } from \"@chakra-ui/react\";\r\n\r\n    \r\n\r\n\r\ninterface title {\r\n    title:string,\r\n}\r\nexport const CustomTitle:React.FC<title> = ({title}) => {\r\n    return (\r\n    <>    \r\n        <Box color='#3182ce' fontSize=\"40px\" id={title} mb={'20px'}>\r\n            {title}\r\n        </Box>\r\n    </>\r\n    )\r\n}\r\n\r\n\r\n\r\ntype baseTextFieldProps = FieldHookConfig<string> & {\r\n\tlabel: string,\r\n    type?: string,\r\n    placeholder?: string,\r\n    func?: (e:string) => void,\r\n    handleBlur: (e: React.FocusEvent<any>) => void;\r\n};\r\n\r\nexport const CustomTextInput:React.FC<baseTextFieldProps> = (props) => {\r\n\tconst [field, meta] = useField(props);\r\n\tconst {type, placeholder, handleBlur, func} = props;\r\n\r\n    return (\r\n        <>\r\n            \r\n            <Input className='text-input'  {...field} type={type} placeholder={placeholder}\r\n            onBlur={(e) => {\r\n              handleBlur(e);\r\n              if(func !== undefined) func(e.target.value);\r\n            } } />\r\n            {meta.touched && meta.error?\r\n            (<div className='error'>{meta.error}</div>) : null}\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nexport const CustomCheckBox:React.FC<baseTextFieldProps> = (props) => {\r\n\tconst [field, meta] = useField(props);\r\n\tconst {label, handleBlur} = props;\r\n\r\n    return (\r\n        <>\r\n            <Checkbox defaultChecked={false} type='checkbox' {...field} className='checkbox'\r\n            onBlur={(e) => {\r\n              handleBlur(e);\r\n            } } >\r\n            {label}\r\n            </Checkbox>\r\n            {meta.touched && meta.error?\r\n            (<div className='error'>{meta.error}</div>) : null}\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n","import { Button, HStack, Container } from \"@chakra-ui/react\";\r\nimport {Page} from  \"../dataStructure/page\";\r\nimport {CustomTitle} from '../components/custom';\r\n\r\ninterface firstPage {\r\n    title:string,\r\n    onChange: any,\r\n}\r\nconst FirstPage:React.FC<firstPage> = ({title, onChange}) => {\r\n    const buttons = [Page.SignUp, Page.SignIn];\r\n\r\n    \r\n\r\n    return (\r\n        <>  \r\n            <CustomTitle title={title}/>\r\n\r\n            <Container centerContent={true}>\r\n            <HStack spacing={8}>\r\n            {buttons.map((b, i) => \r\n                <Button key={i} colorScheme=\"blue\" onClick={() => onChange(b)}>\r\n                    {b}\r\n                </Button>)}            \r\n            </HStack>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default FirstPage;","import {Formik, \r\n    Form,\r\n    }  from 'formik';\r\nimport {Button, \r\n    Container, \r\n    } from \"@chakra-ui/react\";\r\nimport * as Yup from 'yup';\r\nimport '../style/field.scss';\r\nimport {Page} from  \"../dataStructure/page\";\r\nimport {CustomCheckBox, CustomTextInput, CustomTitle} from '../components/custom';\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface signUp {\r\nchangePage:(page: Page) => void,\r\n}\r\n\r\n\r\nconst  SignUp: React.FC<signUp> = ({changePage}) => {\r\n  \r\n  const emailFilter = (key:string)=> {return (key !== 'email');}\r\n  const emails = Object.keys(localStorage).filter(emailFilter);\r\n\r\n\r\nreturn (\r\n    <>\r\n    <Formik \r\n    initialValues={{\r\n        firstName:'',\r\n        lastName:'',\r\n        email:'',\r\n        password:'',\r\n        passwordConfirm:'',\r\n        acceptedTerms: false,\r\n    }}\r\n\r\n    validationSchema={Yup.object({\r\n        firstName: Yup.string()\r\n            .min(3, 'Must be at least 3 characters long.')\r\n            .max(15, 'Must be 15 characters or less.')\r\n            .required('Required'),\r\n        lastName: Yup.string()\r\n            .min(3, 'Must be at least 3 characters long.')\r\n            .max(15, 'Must be 15 characters or less.')\r\n            .required('Required'),\r\n        email: Yup.string()            \r\n            .email('Invalid email address.')\r\n            .required('Please Enter a valid email address.')\r\n            .notOneOf(emails, 'This email is already in use.'),\r\n        password: Yup.string()\r\n            .matches(\r\n                /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\r\n                \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\r\n              )           \r\n            .required('Please Enter your password.'),\r\n        passwordConfirm: Yup.string()\r\n            .when('password', (password:boolean, field: any) =>\r\n            password ? field.required('Please confirm your password.').oneOf([Yup.ref('password')], 'You must use the same password you inserted before.') : field\r\n            ),\r\n        acceptedTerms: Yup.boolean()\r\n            .oneOf([true], 'You must accept the terms and conditions.')\r\n            .required('Required')\r\n        \r\n\r\n    })}\r\n    onSubmit={(values, {setSubmitting, resetForm}) => {\r\n        setTimeout(()=> {\r\n            const newUser = {\r\n                fName: values.firstName,\r\n                lName: values.lastName,\r\n                pssw: values.password,\r\n                lists: {},\r\n                list: '',\r\n            }\r\n            localStorage.setItem(values.email, JSON.stringify(newUser));\r\n            localStorage.setItem('email', values.email);\r\n            changePage(Page.DashBoard);\r\n\r\n            console.log(values);\r\n            console.log(typeof values);\r\n            resetForm();\r\n            setSubmitting(false);\r\n        }, 1500);\r\n    }}\r\n    >\r\n\r\n        {props => (\r\n\r\n            <Form>\r\n                <Container centerContent={true}>\r\n                <CustomTitle title='Sign Up'/>\r\n                <CustomTextInput label='First Name' name='firstName' type='text' placeholder='First Name' handleBlur={props.handleBlur}/>                    \r\n                <CustomTextInput label='Last Name' name='lastName' type='text' placeholder='Last Name' handleBlur={props.handleBlur}/>                    \r\n                <CustomTextInput label='E-mail' name='email' type='text' placeholder='example@email.com' handleBlur={props.handleBlur}/>                 \r\n                <CustomTextInput label='Password' name='password' type='password' placeholder='password' handleBlur={props.handleBlur}/>\r\n                <CustomTextInput label='passwordConfirm' name='passwordConfirm' type='password' placeholder='password confirmation' handleBlur={props.handleBlur}/>\r\n                <CustomCheckBox name='acceptedTerms' label='I accept the terms and conditions.' handleBlur={props.handleBlur}/>\r\n                <Button type='submit' colorScheme='blue' className='button'> {props.isSubmitting? 'Loading...':'Create Account'}</Button>\r\n                </Container>\r\n            </Form>\r\n        )}\r\n\r\n\r\n    </Formik>            \r\n    </>\r\n)\r\n}\r\n\r\nexport default SignUp\r\n","import {Formik, \r\n    Form}  from 'formik';\r\nimport {Button, \r\n    Container, \r\n    } from \"@chakra-ui/react\";\r\nimport * as Yup from 'yup';\r\nimport '../style/field.scss';\r\nimport {Page} from  \"../dataStructure/page\";\r\nimport {CustomTextInput, CustomTitle} from '../components/custom';\r\nimport {useState} from 'react';\r\n\r\n\r\n\r\ninterface signIn {\r\nchangePage:(page: Page) => void,\r\n}\r\n\r\n\r\nconst  SignIn: React.FC<signIn> = ({changePage}) => {\r\n\r\n  const [state, setstate] = useState<string>('');  \r\n  const [isEmailValid, setIsEmailValid] = useState<boolean>(false);\r\n\r\n\r\n  const setState = (email:string) => {\r\n    const data = localStorage.getItem(email);\r\n    \r\n    setstate(data?JSON.parse(data).pssw:'');\r\n    setIsEmailValid(data?true:false);\r\n  }\r\n\r\n  const emailFilter = (key:string)=> {return (key !== 'email');}\r\n  const emails = Object.keys(localStorage).filter(emailFilter);\r\n  return (\r\n    <>\r\n    <Formik \r\n    initialValues={{\r\n        email:'',\r\n        password:'',\r\n    }}\r\n    validationSchema={Yup.object({\r\n        email: Yup.string()\r\n            .email('Invalid email address.')\r\n            .required('Please your email address.')\r\n            .oneOf(emails,'Sorry, this email is not linked to any account.'),\r\n        password: Yup.string()\r\n        .when('email', (email:boolean, field: any) =>\r\n          email && isEmailValid ? field.required('Please enter your password.').oneOf([state], 'You must use the same password you inserted before.') : field\r\n            ),\r\n\r\n    })}\r\n    onSubmit={(values, {setSubmitting, resetForm}) => {\r\n        setTimeout(()=> {\r\n            \r\n            localStorage.setItem('email', values.email);\r\n            changePage(Page.DashBoard);\r\n\r\n            console.log(values);\r\n            console.log(typeof values);\r\n            resetForm();\r\n            setSubmitting(false);\r\n        }, 1500);\r\n    }}\r\n    >\r\n\r\n        {props => (\r\n\r\n            <Form>\r\n                <Container centerContent={true}>\r\n                <CustomTitle title='Sign In'/>                  \r\n                <CustomTextInput label='E-mail' name='email' type='text' placeholder='example@email.com' func={setState} handleBlur={props.handleBlur}/>                 \r\n                <CustomTextInput label='Password' name='password' type='password' placeholder='********' handleBlur={props.handleBlur}/>\r\n                <Button type='submit' colorScheme='blue' className='button'> {props.isSubmitting? 'Loading...':'Sign In'}</Button>\r\n                </Container>\r\n            </Form>\r\n        )}\r\n\r\n\r\n    </Formik>            \r\n    </>\r\n)\r\n}\r\n\r\nexport default SignIn\r\n","import { Input, InputGroup, InputLeftElement,} from \"@chakra-ui/react\";\r\nimport {EditIcon,} from \"@chakra-ui/icons\";\r\n\r\n\r\ninterface  newTask{\r\n    onChange?: any,\r\n    state?: any,\r\n    type:string,\r\n}\r\n\r\nconst NewTask:React.FC<newTask> = ({onChange, state, type}) => {\r\n    return (\r\n      <>  \r\n        \r\n        <InputGroup alignSelf='center' m={'5px'}>\r\n            <InputLeftElement\r\n            pointerEvents=\"none\"\r\n            children={<EditIcon color=\"gray.300\" />}\r\n            />\r\n            <Input type=\"text\" id={type} placeholder={type} onChange={event => {\r\n                                        onChange(event.target.value as string);\r\n                                      }}/>\r\n        </InputGroup>\r\n\r\n    </>\r\n    )\r\n}\r\n\r\nexport default NewTask","import {Page} from  \"../dataStructure/page\";\r\nimport {CustomTitle} from '../components/custom';\r\nimport { Button, HStack, Container, Box } from \"@chakra-ui/react\";\r\nimport NewTask from \"../components/newTask\";\r\nimport {useState} from 'react';\r\nimport {DeleteIcon} from \"@chakra-ui/icons\";\r\n\r\ninterface dashboard {\r\n    title:string,\r\n    onChange: any,\r\n}\r\nconst Dashboard:React.FC<dashboard> = ({title, onChange}) => {\r\n    const email = localStorage.getItem('email');\r\n    const [newItemField, setNewItemField] = useState(<></>);     \r\n    const [newItem, setNewItem] = useState('');\r\n    const [allItems, setAllItems] = useState<string[]>(Object.keys(JSON.parse(localStorage.getItem(email as string) as string).lists));    \r\n    const [addText, setAddText] = useState('add');\r\n\r\n\r\n    return (\r\n        <>    \r\n            <CustomTitle title={title}/>\r\n\r\n            <Box id='box' mb={'10px'}>\r\n            <HStack spacing={1}> \r\n                {newItemField}\r\n                <Button  visibility={newItem === ''? 'collapse': 'visible'} colorScheme=\"blue\" onClick={ () => {\r\n                                        setAddText('<<');\r\n                                        const data = JSON.parse(localStorage.getItem(email as string) as string) ;\r\n                                        \r\n                                        if(!(newItem in data.lists)){\r\n                                            data.list = newItem;\r\n                                            data.lists[newItem] =  [];\r\n                                            localStorage.setItem(email as string, JSON.stringify(data));\r\n                                            const aux = [...allItems.concat([newItem])];\r\n                                            setAllItems(aux);\r\n\r\n                                            setTimeout(() => onChange(Page.List), 500);\r\n                                        }\r\n                                        \r\n\r\n                                        \r\n                                        \r\n\r\n                                        setNewItem('');\r\n                                        setTimeout(() => setNewItemField(<></>), 200);\r\n                                    }}>\r\n                                    {addText}\r\n                                    </Button>\r\n            </HStack>\r\n            </Box>            \r\n\r\n            <Container centerContent={true}>\r\n            <HStack spacing={8}>\r\n                      \r\n            \r\n\r\n\r\n\r\n\r\n            <Container centerContent={true}>\r\n            <HStack spacing={8}>\r\n                <Button  colorScheme=\"blue\" onClick={() => {\r\n                    setNewItemField(\r\n                                    \r\n                                    <NewTask onChange={setNewItem} type={'new list'}/>\r\n                                                                      \r\n                                );\r\n                                setAddText('add');\r\n                                setTimeout(() =>\r\n                                (document.getElementById(\"new list\") as HTMLElement).focus(), 100); \r\n                }}>\r\n                    New List\r\n                </Button>\r\n             \r\n                                        \r\n            </HStack>\r\n            </Container>\r\n\r\n            </HStack>\r\n            </Container>\r\n\r\n            <Box id='box' m={'20px'} style={{width: '80%', backgroundColor: '#dcecf7', borderRadius:'20px' }}\r\n            onChange={() => {\r\n                \r\n            }}>\r\n                {allItems.map((item, i) => \r\n                    <div  key={i} style={{color: \"#3182ce\", fontSize:\"20px\", margin: '10px'}} >\r\n                        \r\n                        <HStack spacing={5}>\r\n                        <DeleteIcon color=\"gray.300\" onClick={() => {\r\n\r\n                            const data = JSON.parse(localStorage.getItem(email as string) as string);\r\n                            delete data.lists[item];\r\n                            localStorage.setItem(email as string, JSON.stringify(data));\r\n                            console.log(JSON.parse(localStorage.getItem(email as string) as string));\r\n                            \r\n                             const aux1 = [...allItems.slice(0,i)];\r\n                             const aux2 = [...allItems.slice(i+1,allItems.length)];\r\n                             setAllItems(aux1.concat(aux2));\r\n\r\n                             \r\n                        }}/>\r\n                        \r\n                        <Box onClick={() => {\r\n                            const email = localStorage.getItem('email');\r\n                            const data = JSON.parse(localStorage.getItem(email as string) as string) ;\r\n                            data.list = item;\r\n                            \r\n                            localStorage.setItem(email as string, JSON.stringify(data));\r\n                            setTimeout(() => onChange(Page.List), 50);\r\n                        }}\r\n                        >{`${item}`}</Box>\r\n                            \r\n                        </HStack>\r\n                        \r\n                        \r\n                    </div>\r\n                )}\r\n            </Box>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","import { Button, HStack, Container, Box, Checkbox, } from \"@chakra-ui/react\";\r\nimport {Page} from  \"../dataStructure/page\";\r\nimport {CustomTitle} from '../components/custom';\r\nimport NewTask from \"../components/newTask\";\r\nimport {useState} from 'react';\r\nimport {DeleteIcon} from \"@chakra-ui/icons\";\r\n\r\ninterface list {\r\n    title:string,\r\n    onChange: any,\r\n}\r\nconst List:React.FC<list> = ({title, onChange}) => {    \r\n\r\n    const email = localStorage.getItem('email');\r\n    const data = JSON.parse(localStorage.getItem(email as string) as string) ;\r\n    let listNameOld = data.list;\r\n    \r\n    const [listName, setListName] = useState('');\r\n    const [newItemField, setNewItemField] = useState(<></>);     \r\n    const [newItem, setNewItem] = useState('');\r\n    const [allItems, setAllItems] = useState<string[][]>((JSON.parse(localStorage.getItem(email as string) as string).lists[listNameOld]));    \r\n    const [addText, setAddText] = useState('add');\r\n    const [option, setOption] = useState('0');\r\n\r\n    console.log([Object.keys(JSON.parse(localStorage.getItem(email as string) as string).lists[listNameOld])]);\r\n\r\n\r\n    return (\r\n        <>    \r\n        <Box ml ='73%' mt='10px' >\r\n            \r\n        <HStack spacing={3}> \r\n            <Button  colorScheme=\"blue\" size=\"xs\" onClick={() => {\r\n                        setNewItemField(\r\n                                        \r\n                                        <NewTask onChange={setListName} type={'to-do list'}/>\r\n                                                                        \r\n                                    );\r\n                                    setOption('2');\r\n                                    setAddText('add');\r\n                                    setTimeout(() =>\r\n                                    (document.getElementById(\"to-do list\") as HTMLElement).focus(), 100); \r\n                    }}>\r\n                        Rename\r\n            </Button>\r\n\r\n            <Button  colorScheme=\"blue\" size=\"xs\" onClick={() => {\r\n                                                        const email = localStorage.getItem('email');\r\n                                                        const data = JSON.parse(localStorage.getItem(email as string) as string) ;\r\n                                                        data.list = '';\r\n                                                        \r\n                                                        localStorage.setItem(email as string, JSON.stringify(data));\r\n                                                        \r\n                                                        onChange(Page.DashBoard);}}>\r\n                Back\r\n            </Button> \r\n            </HStack>\r\n        </Box>\r\n\r\n\r\n            <CustomTitle title={listNameOld}/>\r\n            \r\n\r\n            \r\n            <Box id='box' mb={'10px'}>\r\n            <HStack spacing={1}> \r\n                {newItemField}\r\n                <Button  visibility={newItem === '' && listName === ''? 'collapse': 'visible'} colorScheme=\"blue\" onClick={ () => {\r\n                                        setAddText('<<');\r\n\r\n                                        if(option === '1'){\r\n                                            const aux = [...allItems.concat([[newItem,'false']])];\r\n                                            setAllItems(aux);\r\n                                        }\r\n                                        if(option === '2'){\r\n                                            const email = localStorage.getItem('email');\r\n                                            const data = JSON.parse(localStorage.getItem(email as string) as string) ;\r\n                                            \r\n                                            if(!(listName in data.lists)){\r\n                                            data.list = listName;\r\n                                            data.lists[listName] = data.lists[listNameOld];\r\n                                            delete data.lists[listNameOld];\r\n                                            \r\n                                            \r\n                                            localStorage.setItem(email as string, JSON.stringify(data));\r\n                                            listNameOld = listName;\r\n                                            }\r\n                                        }\r\n                                        \r\n\r\n                                        setNewItem('');                                        \r\n                                        setListName('');\r\n                                        setNewItemField(<></>);\r\n                                        setOption('0');\r\n                                    }}>\r\n                                    {addText}\r\n                                    </Button>\r\n            </HStack>\r\n            </Box>            \r\n\r\n            <Container centerContent={true}>\r\n            <HStack spacing={8}>\r\n                <Button  colorScheme=\"blue\" onClick={() => {\r\n                    setNewItemField(\r\n                                    \r\n                                    <NewTask onChange={setNewItem} type={'new item'}/>\r\n                                                                      \r\n                                );\r\n                                setOption('1');\r\n                                setAddText('add');\r\n                                setTimeout(() =>\r\n                                (document.getElementById(\"new item\") as HTMLElement).focus(), 100); \r\n                }}>\r\n                    New Item\r\n                </Button>\r\n             \r\n                <Button  colorScheme=\"blue\" onClick={() => {\r\n                                                            saveList(allItems);\r\n                                                            onChange(Page.DashBoard);\r\n                                                            \r\n                                                            }}>\r\n                Save\r\n            </Button>  \r\n                                        \r\n            </HStack>\r\n            </Container>\r\n\r\n            <Box id='box' m={'20px'} style={{width: '80%', backgroundColor: '#dcecf7', borderRadius:'20px' }}\r\n            onChange={() => {\r\n                \r\n            }}>\r\n                {allItems.map((item, i) => \r\n                    <div  draggable=\"true\"  key={i} style={{color: \"#3182ce\", fontSize:\"20px\", margin: '10px'}} >\r\n                        \r\n                        <HStack spacing={5} >\r\n                        <DeleteIcon color=\"gray.400\" onClick={() => {\r\n                            \r\n                             const aux1 = [...allItems.slice(0,i)];\r\n                             const aux2 = [...allItems.slice(i+1,allItems.length)];\r\n                             setAllItems(aux1.concat(aux2));\r\n\r\n                             \r\n                        }}/>\r\n                        <Checkbox  isChecked={item[1] === 'true'} colorScheme=\"blue\" defaultIsChecked={item[1] === 'true'} style={{borderColor : '#3182ce'}}\r\n                        onChange={() => {\r\n                            const auxCheck = [...allItems];\r\n                            auxCheck[i][1] = auxCheck[i][1] === 'true'? 'false':'true';\r\n                            setAllItems(auxCheck);\r\n                        }}> \r\n                        {`${item[0]}`}\r\n                        </Checkbox>\r\n                            \r\n                        </HStack>\r\n                        \r\n                        \r\n                    </div>\r\n                )}\r\n            </Box>\r\n\r\n\r\n            <Container centerContent={true}>\r\n            <HStack spacing={8}>\r\n              \r\n             \r\n            </HStack>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default List;\r\n\r\nconst saveList = (items:any) => {\r\n    \r\n    const email = localStorage.getItem('email');\r\n    const data = JSON.parse(localStorage.getItem(email as string) as string) ;\r\n    const listName = data.list;\r\n    data.lists[listName] = [];\r\n\r\n    for(let item of items){\r\n        data.lists[listName].push(item);\r\n    }\r\n    localStorage.setItem(email as string, JSON.stringify(data));\r\n    console.log(localStorage.getItem(email as string));\r\n                                        \r\n                                       \r\n\r\n}","import {Box, Button} from \"@chakra-ui/react\";\r\nimport {Page} from  \"../dataStructure/page\";\r\n\r\n\r\ninterface  menu{\r\n    onClick: (pag:Page) => void,\r\n    text: string,\r\n    page: Page,\r\n    visibility: string;\r\n}\r\n\r\nconst Menu:React.FC<menu> = ({onClick, text, page, visibility}) => {\r\n    \r\n    return (\r\n      <>  \r\n        \r\n        <Box ml ='90%' mt='10px' >\r\n            <Button visibility={visibility as 'visible' | 'hidden'}  colorScheme=\"blue\" size=\"xs\" onClick={() => {\r\n                if(text === 'Log out')\r\n                    localStorage.setItem('email', '');\r\n                onClick(page);\r\n                \r\n                }}>\r\n                {text}\r\n            </Button> \r\n        </Box>\r\n\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Menu","import {Page} from  \"./dataStructure/page\";\nimport FirstPage from \"./pages/firstPage\";\nimport SignUp from \"./pages/sign_up\";\nimport SignIn from \"./pages/sign_in\";\nimport Dashboard from \"./pages/dash_board\";\nimport List from \"./pages/list\";\nimport Menu from \"./components/menu\";\nimport {useState} from 'react';\nimport { Container} from \"@chakra-ui/react\";\n\ninterface app {\n  whichPage: Page,\n}\n\nconst App:React.FC<app> = ({whichPage}) => {\n  const [state, setstate] = useState(whichPage);\n\n  let currentPage = <> </>;\n  let menu =   <Menu onClick={setstate} visibility={'visible'}  text='Back' page={Page.FirstPage}/>;\n  \n\n\n  if(state === Page.FirstPage){\n    menu = <Menu onClick={setstate} visibility={'hidden'}  text='Back' page={Page.FirstPage}/>;\n    currentPage = <FirstPage title='To-Do List' onChange={setstate} />\n  }\n  else if(state === Page.SignUp)\n    currentPage = <SignUp changePage={setstate}/>\n  else if(state === Page.SignIn)\n    currentPage = <SignIn changePage={setstate}/>\n  else if(state === Page.DashBoard){\n    menu =    <Menu onClick={setstate} visibility={'visible'}  text='Log out' page={Page.FirstPage}/>;\n    currentPage = <Dashboard title='Dashboard' onChange={setstate}/>\n  }\n  else if(state === Page.List){\n    menu = <> </>;\n    currentPage = <List title='List' onChange={setstate}/>\n  }\n  return (\n      <> \n          <Container centerContent={true} >\n            {menu}\n            {currentPage}\n          </Container>\n      </>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider} from \"@chakra-ui/react\";\nimport {Page} from  \"./dataStructure/page\";\n\n\nlet whichPage = Page.FirstPage;\n\n\n//localStorage.clear();\n\nif (!localStorage.getItem('email'))    \n        localStorage.setItem('email', '');\n    else if (localStorage.getItem('email') !== '') {\n        whichPage = Page.DashBoard;\n    }\n\n\n\nReactDOM.render(\n  <>\n  \n  <ChakraProvider>\n  <React.StrictMode>\n    <App whichPage={whichPage}/>\n  </React.StrictMode>\n  </ChakraProvider>\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}