{"version":3,"sources":["dataStructure/page.tsx","components/custom.tsx","pages/firstPage.tsx","firebase.tsx","pages/sign_up.tsx","pages/sign_in.tsx","components/newTask.tsx","dataStructure/user.tsx","helpers/save.tsx","pages/dash_board.tsx","pages/list.tsx","components/menu.tsx","App.tsx","reportWebVitals.ts","theme.tsx","index.tsx"],"names":["Page","CustomTitle","title","color","fontSize","id","mb","CustomTextInput","props","useField","field","meta","type","placeholder","handleBlur","func","className","onBlur","e","undefined","target","value","touched","error","CustomCheckBox","label","defaultChecked","FirstPage","onChange","buttons","SignUp","SignIn","centerContent","spacing","map","b","i","colorScheme","onClick","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","changePage","useState","emailsFireStore","setEmailsFireStore","ref","firestore","collection","doc","console","log","useEffect","onSnapshot","querySnapshot","emails","push","data","initialValues","firstName","lastName","email","password","passwordConfirm","acceptedTerms","validationSchema","Yup","min","max","required","notOneOf","matches","when","oneOf","onSubmit","values","setSubmitting","resetForm","setTimeout","newUser","fName","lName","pssw","lists","list","localStorage","setItem","set","then","DashBoard","catch","name","isSubmitting","state","setstate","isEmailValid","setIsEmailValid","setState","get","exists","NewTask","alignSelf","m","pointerEvents","children","Edit","event","saveStateAndFirestore","newState","Dashboard","getItem","dataFireStore","setDataFireStore","newItemField","setNewItemField","newItem","setNewItem","addText","setAddText","allItems","setAllItems","Object","keys","visibility","List","document","getElementById","focus","style","width","backgroundColor","borderRadius","item","margin","Delete","aux1","slice","aux2","length","concat","dataFireStoreBackup","SetDataFireStoreBackup","listName","setListName","option","setOption","buttonVisibility","setButtonVisibility","mouse_Movement","save","window","innerWidth","getBoundingClientRect","x","y","saveX","saveY","d","clientX","clientY","addEventListener","removeEventListener","ml","mt","size","in","draggable","isChecked","split","defaultIsChecked","borderColor","auxCheck","aux","auxLink","href","Menu","text","page","App","whichPage","currentPage","menu","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","styles","global","body","bg","opacity","components","Container","baseStyle","fontWeight","Input","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.61818bef.chunk.js","sourcesContent":["export enum Page {\r\n    FirstPage = \"First Page\",\r\n    SignUp = \"Sign Up\",\r\n    SignIn = \"Sign In\",\r\n    DashBoard = \"Dashboard\",\r\n    List = \"List\",\r\n}","import {\r\n    useField, \r\n    FieldHookConfig}  from 'formik';\r\nimport {\r\n    Input,\r\n    Checkbox,\r\n    Box,\r\n    } from \"@chakra-ui/react\";\r\n\r\n    \r\n\r\n\r\ninterface title {\r\n    title:string,\r\n}\r\nexport const CustomTitle:React.FC<title> = ({title}) => {\r\n    return (\r\n    <>    \r\n        <Box color='#3182ce' fontSize=\"40px\" id={title} mb={'20px'}>\r\n            {title}\r\n        </Box>\r\n    </>\r\n    )\r\n}\r\n\r\n\r\n\r\ntype baseTextFieldProps = FieldHookConfig<string> & {\r\n\tlabel: string,\r\n    type?: string,\r\n    placeholder?: string,\r\n    func?: (e:string) => void,\r\n    handleBlur: (e: React.FocusEvent<any>) => void;\r\n};\r\n\r\nexport const CustomTextInput:React.FC<baseTextFieldProps> = (props) => {\r\n\tconst [field, meta] = useField(props);\r\n\tconst {type, placeholder, handleBlur, func} = props;\r\n\r\n    return (\r\n        <>\r\n            \r\n            <Input className='text-input'  {...field} type={type} placeholder={placeholder}\r\n            onBlur={(e) => {\r\n              handleBlur(e);\r\n              if(func !== undefined) func(e.target.value);\r\n            } } />\r\n            {meta.touched && meta.error?\r\n            (<div className='error'>{meta.error}</div>) : null}\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nexport const CustomCheckBox:React.FC<baseTextFieldProps> = (props) => {\r\n\tconst [field, meta] = useField(props);\r\n\tconst {label, handleBlur} = props;\r\n\r\n    return (\r\n        <>\r\n            <Checkbox defaultChecked={false} type='checkbox' {...field} className='checkbox'\r\n            onBlur={(e) => {\r\n              handleBlur(e);\r\n            } } >\r\n            {label}\r\n            </Checkbox>\r\n            {meta.touched && meta.error?\r\n            (<div className='error'>{meta.error}</div>) : null}\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n","import { Button, HStack, Container } from \"@chakra-ui/react\";\r\nimport {Page} from  \"../dataStructure/page\";\r\nimport {CustomTitle} from '../components/custom';\r\n\r\ninterface firstPage {\r\n    title:string,\r\n    onChange: any,\r\n}\r\nconst FirstPage:React.FC<firstPage> = ({title, onChange}) => {\r\n    const buttons = [Page.SignUp, Page.SignIn];\r\n\r\n    \r\n\r\n    return (\r\n        <>  \r\n            <CustomTitle title={title}/>\r\n\r\n            <Container centerContent={true}>\r\n            <HStack spacing={8}>\r\n            {buttons.map((b, i) => \r\n                <Button key={i} colorScheme=\"blue\" onClick={() => onChange(b)}>\r\n                    {b}\r\n                </Button>)}            \r\n            </HStack>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default FirstPage;","import firebase from \"firebase/app\";\r\nimport 'firebase/firestore';\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBaUv1_rwA3oi6TG1dmbOiGis4yRjnLLc8\",\r\n  authDomain: \"bizarro-todo-list.firebaseapp.com\",\r\n  projectId: \"bizarro-todo-list\",\r\n  storageBucket: \"bizarro-todo-list.appspot.com\",\r\n  messagingSenderId: \"347684058314\",\r\n  appId: \"1:347684058314:web:401ec1d43df553b2753033\",\r\n  measurementId: \"G-JR40FJDVQT\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n\r\n","import {Formik, \r\n    Form,\r\n    }  from 'formik';\r\nimport {Button, \r\n    Container, \r\n    } from \"@chakra-ui/react\";\r\nimport * as Yup from 'yup';\r\nimport '../style/field.scss';\r\nimport {Page} from  \"../dataStructure/page\";\r\nimport {CustomCheckBox, CustomTextInput, CustomTitle} from '../components/custom';\r\nimport firebase from '../firebase';\r\nimport {useEffect, useState} from 'react';\r\nimport { ThemeContext } from '@emotion/react';\r\n\r\n\r\n\r\n\r\n\r\ninterface signUp {\r\nchangePage:(page: Page) => void,\r\n}\r\n\r\n\r\nconst  SignUp: React.FC<signUp> = ({changePage}) => {\r\n  \r\n  //const emailFilter = (key:string)=> {return (key !== 'email');}\r\n  //const emails = Object.keys(localStorage).filter(emailFilter);\r\n  const [emailsFireStore, setEmailsFireStore ] = useState<string[]>([])\r\n\r\n  const ref = firebase.firestore().collection('users').doc('users_document');\r\n  console.log(ref);\r\n\r\n  const effect = () => {\r\n    ref.onSnapshot((querySnapshot) => {\r\n      const emails:any[] = [];\r\n      emails.push(querySnapshot.data()? querySnapshot.data(): '');\r\n      setEmailsFireStore(emails[0]['email']);\r\n\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    \r\n    effect();\r\n  }, []);\r\n\r\n\r\n\r\n\r\nreturn (\r\n    <>\r\n    <Formik \r\n    initialValues={{\r\n        firstName:'',\r\n        lastName:'',\r\n        email:'',\r\n        password:'',\r\n        passwordConfirm:'',\r\n        acceptedTerms: false,\r\n    }}\r\n\r\n    validationSchema={Yup.object({\r\n        firstName: Yup.string()\r\n            .min(3, 'Must be at least 3 characters long.')\r\n            .max(15, 'Must be 15 characters or less.')\r\n            .required('Required'),\r\n        lastName: Yup.string()\r\n            .min(3, 'Must be at least 3 characters long.')\r\n            .max(15, 'Must be 15 characters or less.')\r\n            .required('Required'),\r\n        email: Yup.string()            \r\n            .email('Invalid email address.')\r\n            .required('Please Enter a valid email address.')\r\n            .notOneOf(emailsFireStore, 'This email is already in use.'),\r\n        password: Yup.string()\r\n            .matches(\r\n                /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\r\n                \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\r\n              )           \r\n            .required('Please Enter your password.'),\r\n        passwordConfirm: Yup.string()\r\n            .when('password', (password:boolean, field: any) =>\r\n            password ? field.required('Please confirm your password.').oneOf([Yup.ref('password')], 'You must use the same password you inserted before.') : field\r\n            ),\r\n        acceptedTerms: Yup.boolean()\r\n            .oneOf([true], 'You must accept the terms and conditions.')\r\n            .required('Required')\r\n        \r\n\r\n    })}\r\n    onSubmit={(values, {setSubmitting, resetForm}) => {\r\n        setTimeout(()=> {\r\n            const newUser = {\r\n                fName: values.firstName,\r\n                lName: values.lastName,\r\n                pssw: values.password,\r\n                lists: {},\r\n                list: '',\r\n            }\r\n            //localStorage.setItem(values.email, JSON.stringify(newUser));\r\n            localStorage.setItem('email', values.email);\r\n\r\n            \r\n            ref.set(\r\n                  {email: [values.email,...emailsFireStore]}\r\n            ).then(() => {\r\n              console.log('DONE EMAIL');\r\n              ref.collection(values.email).doc('data').set(\r\n                newUser\r\n              ).then(() => {\r\n                console.log('DONE DATA');\r\n              });\r\n              \r\n            changePage(Page.DashBoard);\r\n            }).catch((e) => console.log(`ERROR ${e}`));\r\n\r\n\r\n            console.log(values);\r\n            console.log(typeof values);\r\n            resetForm();\r\n            setSubmitting(false);\r\n        }, 1500);\r\n    }}\r\n    >\r\n\r\n        {props => (\r\n\r\n            <Form>\r\n                <Container centerContent={true}>\r\n                <CustomTitle title='Sign Up'/>\r\n                <CustomTextInput label='First Name' name='firstName' type='text' placeholder='First Name' handleBlur={props.handleBlur}/>                    \r\n                <CustomTextInput label='Last Name' name='lastName' type='text' placeholder='Last Name' handleBlur={props.handleBlur}/>                    \r\n                <CustomTextInput label='E-mail' name='email' type='text' placeholder='example@email.com' handleBlur={props.handleBlur}/>                 \r\n                <CustomTextInput label='Password' name='password' type='password' placeholder='password' handleBlur={props.handleBlur}/>\r\n                <CustomTextInput label='passwordConfirm' name='passwordConfirm' type='password' placeholder='password confirmation' handleBlur={props.handleBlur}/>\r\n                <CustomCheckBox name='acceptedTerms' label='I accept the terms and conditions.' handleBlur={props.handleBlur}/>\r\n                <Button type='submit' colorScheme='blue' className='button'> {props.isSubmitting? 'Loading...':'Create Account'}</Button>\r\n                </Container>\r\n            </Form>\r\n        )}\r\n\r\n\r\n    </Formik>            \r\n    </>\r\n)\r\n}\r\n\r\nexport default SignUp\r\n","import {Formik, \r\n    Form}  from 'formik';\r\nimport {Button, \r\n    Container, \r\n    } from \"@chakra-ui/react\";\r\nimport * as Yup from 'yup';\r\nimport '../style/field.scss';\r\nimport {Page} from  \"../dataStructure/page\";\r\nimport {CustomTextInput, CustomTitle} from '../components/custom';\r\nimport firebase from '../firebase';\r\nimport {useEffect, useState} from 'react';\r\n\r\n\r\n\r\ninterface signIn {\r\nchangePage:(page: Page) => void,\r\n}\r\n\r\n\r\nconst  SignIn: React.FC<signIn> = ({changePage}) => {\r\n\r\n  \r\n  const [emailsFireStore, setEmailsFireStore ] = useState<string[]>([])\r\n\r\n  const ref = firebase.firestore().collection('users').doc('users_document');\r\n  console.log(ref);\r\n\r\n  const effect = () => {\r\n    ref.onSnapshot((querySnapshot) => {\r\n      const emails:any[] = [];\r\n      emails.push(querySnapshot.data()? querySnapshot.data(): '');\r\n      setEmailsFireStore(emails[0]['email']);\r\n\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    \r\n    effect();\r\n  }, []);\r\n\r\n  const [state, setstate] = useState<string>('');  \r\n  const [isEmailValid, setIsEmailValid] = useState<boolean>(false);\r\n\r\n  interface LooseObject {\r\n    [key: string]: any\r\n}\r\n\r\n  const newUser = {\r\n    fName: '',\r\n    lName: '',\r\n    pssw: '',\r\n    lists: {} as LooseObject,\r\n    list: '',\r\n  }\r\n\r\n\r\n  const setState = (email:string) => {\r\n    const refEmail = firebase.firestore().collection('users').doc('users_document').collection(email as string).doc('data');\r\n    refEmail.get().then((doc) => {\r\n      if (doc.exists) {\r\n        \r\n        setIsEmailValid(true);\r\n        setstate((doc.data() as typeof newUser).pssw as string);\r\n      } \r\n      else\r\n        setIsEmailValid(false);\r\n    });\r\n  }\r\n\r\n  \r\n  return (\r\n    <>\r\n    <Formik \r\n    initialValues={{\r\n        email:'',\r\n        password:'',\r\n    }}\r\n    validationSchema={Yup.object({\r\n        email: Yup.string()\r\n            .email('Invalid email address.')\r\n            .required('Please your email address.')\r\n            .oneOf(emailsFireStore,'Sorry, this email is not linked to any account.'),\r\n        password: Yup.string()\r\n        .when('email', (email:boolean, field: any) =>\r\n          email && isEmailValid ? field.required('Please enter your password.').oneOf([state], 'You must use the same password you inserted before.') : field\r\n            ),\r\n\r\n    })}\r\n    onSubmit={(values, {setSubmitting, resetForm}) => {\r\n        setTimeout(()=> {\r\n            \r\n            localStorage.setItem('email', values.email);\r\n            changePage(Page.DashBoard);\r\n\r\n            console.log(values);\r\n            console.log(typeof values);\r\n            resetForm();\r\n            setSubmitting(false);\r\n        }, 1500);\r\n    }}\r\n    >\r\n\r\n        {props => (\r\n\r\n            <Form>\r\n                <Container centerContent={true}>\r\n                <CustomTitle title='Sign In'/>                  \r\n                <CustomTextInput label='E-mail' name='email' type='text' placeholder='example@email.com' func={setState} handleBlur={props.handleBlur}/>                 \r\n                <CustomTextInput label='Password' name='password' type='password' placeholder='********' handleBlur={props.handleBlur}/>\r\n                <Button type='submit' colorScheme='blue' className='button'> {props.isSubmitting? 'Loading...':'Sign In'}</Button>\r\n                </Container>\r\n            </Form>\r\n        )}\r\n\r\n\r\n    </Formik>            \r\n    </>\r\n)\r\n}\r\n\r\nexport default SignIn\r\n","import { Input, InputGroup, InputLeftElement,} from \"@chakra-ui/react\";\r\nimport {EditIcon,} from \"@chakra-ui/icons\";\r\n\r\n\r\ninterface  newTask{\r\n    onChange?: any,\r\n    state?: any,\r\n    type:string,\r\n}\r\n\r\nconst NewTask:React.FC<newTask> = ({onChange, state, type}) => {\r\n    return (\r\n      <>  \r\n        \r\n        <InputGroup alignSelf='center' m={'5px'}>\r\n            <InputLeftElement\r\n            pointerEvents=\"none\"\r\n            children={<EditIcon color=\"gray.300\" />}\r\n            />\r\n            <Input type=\"text\" id={type} placeholder={type} onChange={event => {\r\n                                        onChange(event.target.value as string);\r\n                                      }}/>\r\n        </InputGroup>\r\n\r\n    </>\r\n    )\r\n}\r\n\r\nexport default NewTask","interface LooseObject {\r\n  [key: string]: any\r\n}\r\n\r\nconst newUser = {\r\n  fName: '',\r\n  lName: '',\r\n  pssw: '',\r\n  lists: {} as LooseObject,\r\n  list: '',\r\n}\r\n\r\nexport default newUser","import firebase from \"firebase/app\";\r\nimport newUser from '../dataStructure/user';\r\n\r\ninterface SaveStateAndFirestore{\r\n  ref:firebase.firestore.DocumentData;\r\n  setState: React.Dispatch<React.SetStateAction<typeof newUser>>;\r\n  newState: typeof newUser;\r\n\r\n}\r\n\r\nexport const saveStateAndFirestore=({ref, setState, newState}:SaveStateAndFirestore) => {\r\n  setState(newState);\r\n  ref.set(\r\n    newState\r\n  ).then(() => {\r\n    console.log('DONE DATA');\r\n  });\r\n}\r\n","import {Page} from  \"../dataStructure/page\";\r\nimport {CustomTitle} from '../components/custom';\r\nimport { Button, HStack, Container, Box } from \"@chakra-ui/react\";\r\nimport NewTask from \"../components/newTask\";\r\nimport {DeleteIcon} from \"@chakra-ui/icons\";\r\nimport firebase from '../firebase';\r\nimport {useEffect, useState} from 'react';\r\nimport newUser from '../dataStructure/user';\r\nimport {saveStateAndFirestore} from '../helpers/save';\r\n\r\n\r\n\r\ninterface dashboard {\r\n    title:string,\r\n    onChange: any,\r\n}\r\nconst Dashboard:React.FC<dashboard> = ({title, onChange}) => {\r\n    \r\n  //localStorage.clear();\r\n    const email = localStorage.getItem('email');\r\n    const ref = firebase.firestore().collection('users').doc('users_document').collection(email as string).doc('data');\r\n    //console.log(ref);\r\n    \r\n  \r\n    \r\n    const [dataFireStore, setDataFireStore ] = useState<typeof newUser>(newUser);\r\n\r\n    const effect = () => {\r\n      ref.onSnapshot((querySnapshot) => {\r\n        setDataFireStore(querySnapshot.data()? querySnapshot.data() as typeof newUser: newUser);\r\n        })\r\n    }\r\n  \r\n\r\n\r\n    \r\n\r\n\r\n    const [newItemField, setNewItemField] = useState(<></>);     \r\n    const [newItem, setNewItem] = useState(''); \r\n    const [addText, setAddText] = useState('add');     \r\n    const [allItems, setAllItems] = useState<string[]>([]);   \r\n\r\n  useEffect(() => {\r\n\r\n      effect(); \r\n                                          \r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      setAllItems(Object.keys(dataFireStore.lists));  \r\n                                              \r\n    }, [dataFireStore]);\r\n\r\n    \r\n\r\n    return (\r\n        <>    \r\n            <CustomTitle title={title}/>\r\n\r\n            <Box id='box' mb={'10px'}>\r\n            <HStack spacing={1}> \r\n                {newItemField}\r\n                <Button  visibility={newItem === ''? 'collapse': 'visible'} colorScheme=\"blue\" onClick={ () => {\r\n                                        setAddText('<<');\r\n                                        \r\n\r\n                                        if(!(newItem in dataFireStore.lists)){\r\n\r\n                                          const data = dataFireStore;\r\n                                          data.list = newItem;\r\n                                          \r\n                                          data.lists[newItem] =  [];\r\n                                          saveStateAndFirestore({ref, setState:setDataFireStore, newState:data});\r\n                                              \r\n                                          setTimeout(() => onChange(Page.List), 500);\r\n                                      }\r\n                                        \r\n\r\n                                        \r\n                                        \r\n\r\n                                        setNewItem('');\r\n                                        setTimeout(() => setNewItemField(<></>), 200);\r\n                                    }}>\r\n                                    {addText}\r\n                                    </Button>\r\n            </HStack>\r\n            </Box>            \r\n\r\n            <Container centerContent={true}>\r\n            <HStack spacing={8}>\r\n                      \r\n            \r\n\r\n\r\n\r\n\r\n            <Container centerContent={true}>\r\n            <HStack spacing={8}>\r\n                <Button  colorScheme=\"blue\" onClick={() => {\r\n                    setNewItemField(\r\n                                    \r\n                                    <NewTask onChange={setNewItem} type={'new list'}/>\r\n                                                                      \r\n                                );\r\n                                setAddText('add');\r\n                                setTimeout(() =>\r\n                                (document.getElementById(\"new list\") as HTMLElement).focus(), 100); \r\n                }}>\r\n                    New List\r\n                </Button>\r\n             \r\n                                        \r\n            </HStack>\r\n            </Container>\r\n\r\n            </HStack>\r\n            </Container>\r\n\r\n            <Box id='box' m={'20px'} style={{width: '80%', backgroundColor: '#dcecf7', borderRadius:'20px' }}\r\n            onChange={() => {\r\n                \r\n            }}>\r\n                {allItems.map((item, i) => \r\n                    <div  key={i} style={{color: \"#3182ce\", fontSize:\"20px\", margin: '10px'}} >\r\n                        \r\n                        <HStack spacing={5}>\r\n                        <DeleteIcon color=\"gray.300\" onClick={() => {\r\n\r\n                            const data = dataFireStore;\r\n                            delete data.lists[item];\r\n                            saveStateAndFirestore({ref, setState:setDataFireStore, newState:data});\r\n                                                        \r\n                            \r\n                             const aux1 = [...allItems.slice(0,i)];\r\n                             const aux2 = [...allItems.slice(i+1,allItems.length)];\r\n                             setAllItems(aux1.concat(aux2));\r\n\r\n                             \r\n                        }}/>\r\n                        \r\n                        <Box onClick={() => {\r\n                            \r\n\r\n                            const data = dataFireStore;\r\n                            data.list = item;\r\n                            saveStateAndFirestore({ref, setState:setDataFireStore, newState:data});\r\n                                                                                    \r\n                            setTimeout(() => onChange(Page.List), 50);\r\n                        }}\r\n                        >{`${item}`}</Box>\r\n                            \r\n                        </HStack>\r\n                        \r\n                        \r\n                    </div>\r\n                )}\r\n            </Box>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","import { Button, HStack, Container, Box, Checkbox, Fade, Divider } from \"@chakra-ui/react\";\r\nimport {Page} from  \"../dataStructure/page\";\r\nimport {CustomTitle} from '../components/custom';\r\nimport NewTask from \"../components/newTask\";  \r\nimport {DeleteIcon} from \"@chakra-ui/icons\";\r\nimport firebase from '../firebase';\r\nimport {useEffect, useState} from 'react';\r\nimport newUser from '../dataStructure/user';\r\nimport {saveStateAndFirestore} from '../helpers/save';\r\n\r\ninterface list {\r\n    title:string,\r\n    onChange: any,\r\n}\r\nconst List:React.FC<list> = ({title, onChange}) => {   \r\n    const email = localStorage.getItem('email');\r\n    const ref = firebase.firestore().collection('users').doc('users_document').collection(email as string).doc('data');\r\n        \r\n    const [dataFireStore, setDataFireStore ] = useState<typeof newUser>(newUser);\r\n    const [dataFireStoreBackup, SetDataFireStoreBackup ] = useState<typeof newUser>(newUser);\r\n\r\n    const effect = () => {\r\n      ref.onSnapshot((querySnapshot) => {\r\n        setDataFireStore(querySnapshot.data()? querySnapshot.data() as typeof newUser: newUser);\r\n        \r\n        });\r\n        ref.get().then((doc) => {\r\n          if (doc.exists) {\r\n            SetDataFireStoreBackup(doc.data() as typeof newUser);\r\n          } \r\n        });\r\n    }\r\n\r\n\r\n\r\n    \r\n    const [listName, setListName] = useState('');\r\n    const [newItemField, setNewItemField] = useState(<></>);     \r\n    const [newItem, setNewItem] = useState('');  \r\n    const [addText, setAddText] = useState('add');\r\n    const [option, setOption] = useState('0');\r\n    const [buttonVisibility, setButtonVisibility] = useState(true)\r\n\r\n    const MAX_DIST = 35000;\r\n    const mouse_Movement = (e:MouseEvent)=> {\r\n      const save = document.getElementById('newItem');\r\n      console.log(window.innerWidth);\r\n      if(save && window.innerWidth > 500){\r\n        const [saveX,saveY]=[save.getBoundingClientRect().x,save.getBoundingClientRect().y];\r\n        const d =(e.clientX-saveX-100)*(e.clientX-saveX-100)  + (e.clientY-saveY-10)*(e.clientY-saveY-10);\r\n        setButtonVisibility( d < MAX_DIST);\r\n      }\r\n      else  \r\n        setButtonVisibility(true);\r\n      \r\n    }\r\n\r\n    useEffect(() => {\r\n      effect();     \r\n      window.addEventListener('mousemove', mouse_Movement);     \r\n      return () => {\r\n        window.removeEventListener('mousemove', mouse_Movement);\r\n      };                         \r\n    }, []);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>    \r\n        <Box ml ='70%' mt='10px' >\r\n            \r\n        <HStack spacing={3}> \r\n            <Button  colorScheme=\"blue\" size=\"xs\" onClick={() => {\r\n                        setNewItemField(\r\n                                        \r\n                                        <NewTask onChange={setListName} type={'to-do list'}/>\r\n                                                                        \r\n                                    );\r\n                                    setOption('2');\r\n                                    setAddText('add');\r\n                                    setTimeout(() =>\r\n                                    (document.getElementById(\"to-do list\") as HTMLElement).focus(), 100); \r\n                    }}>\r\n                        Rename\r\n            </Button>\r\n\r\n            <Button  colorScheme=\"blue\" size=\"xs\" onClick={() => {\r\n                                                        const data = dataFireStoreBackup;\r\n                                                        data.list = '';                                                     \r\n                                                       saveStateAndFirestore({ref, setState:setDataFireStore, newState:data});\r\n                                                        \r\n                                                        onChange(Page.DashBoard);}}>\r\n                Cancel\r\n            </Button> \r\n            </HStack>\r\n        </Box>\r\n\r\n\r\n            <CustomTitle title={dataFireStore.list}/>\r\n            \r\n\r\n            \r\n            <Box id='box' mb={'10px'}>\r\n            <HStack spacing={1}> \r\n                {newItemField}\r\n                <Button  visibility={newItem === '' && listName === ''? 'collapse': 'visible'} colorScheme=\"blue\" onClick={ () => {\r\n                                        setAddText('<<');\r\n\r\n                                        if(option === '1'){\r\n                                            const data = dataFireStore;\r\n                                            data.lists[data.list] =[...data.lists[data.list].concat([`${newItem}!***!false!***!`])];\r\n                                            saveStateAndFirestore({ref, setState:setDataFireStore, newState:data});\r\n                                                        \r\n                                        }\r\n                                        if(option === '2'){\r\n                                            const data = dataFireStore;\r\n                                            \r\n                                            if(!(listName in data.lists)){\r\n                                            data.list = listName;\r\n                                            data.lists[listName] = data.lists[dataFireStoreBackup.list];\r\n                                            delete data.lists[dataFireStoreBackup.list];\r\n\r\n                                            saveStateAndFirestore({ref, setState:setDataFireStore, newState:data});\r\n                                                        \r\n                                            }\r\n                                        }\r\n                                        \r\n\r\n                                        setNewItem('');                                        \r\n                                        setListName('');\r\n                                        setNewItemField(<></>);\r\n                                        setOption('0');\r\n                                    }}>\r\n                                    {addText}\r\n                                    </Button>\r\n            </HStack>\r\n            </Box>            \r\n\r\n            <Container centerContent={true}>    \r\n            \r\n            <Fade in={buttonVisibility} id='newItem'>\r\n              \r\n            <HStack spacing={8}>   \r\n                <Button  colorScheme=\"blue\" onClick={() => {\r\n                    setNewItemField(\r\n                                    \r\n                                    <NewTask onChange={setNewItem} type={'new item'}/>\r\n                                                                      \r\n                                );\r\n                                setOption('1');\r\n                                setAddText('add');\r\n                                setTimeout(() =>\r\n                                (document.getElementById(\"new item\") as HTMLElement).focus(), 100); \r\n                }}>\r\n                    New Item\r\n                </Button>\r\n             \r\n            <Button  id='save' colorScheme=\"blue\"  onClick={() => {\r\n                                                            \r\n                                                            onChange(Page.DashBoard);\r\n                                                            \r\n                                                            }}>\r\n                Save\r\n            </Button>  \r\n                           \r\n            </HStack>\r\n            </Fade>\r\n                         \r\n            </Container>\r\n\r\n            <Box id='box' m={'20px'} style={{width: '80%', backgroundColor: '#dcecf7', borderRadius:'20px' }}>\r\n                \r\n                {dataFireStore.lists[dataFireStore.list] !== undefined? (dataFireStore.lists[dataFireStore.list] as string[]).map((item, i) => \r\n                    <div  draggable=\"true\"  key={i} style={{color: \"#3182ce\", fontSize:\"20px\", margin: '10px'}} >\r\n                        \r\n                        <HStack spacing={5} >\r\n                        <DeleteIcon color=\"gray.400\" onClick={() => {\r\n                            const aux1 = [...(dataFireStore.lists[dataFireStore.list]).slice(0,i)];\r\n                            const aux2 = [...(dataFireStore.lists[dataFireStore.list]).slice(i+1,(dataFireStore.lists[dataFireStore.list]).length)];\r\n\r\n                            const data = dataFireStore;\r\n                            data.lists[data.list] = aux1.concat(aux2);\r\n                            saveStateAndFirestore({ref, setState:setDataFireStore, newState:data});\r\n                              \r\n                        }}/>\r\n                        <Checkbox  isChecked={item.split('!***!')[1]=== 'true'} colorScheme=\"blue\" defaultIsChecked={item[1] === 'true'} style={{borderColor : '#3182ce'}}\r\n                        onChange={() => {\r\n                            const auxCheck = [...dataFireStore.lists[dataFireStore.list]];\r\n                            const aux = auxCheck[i].split('!***!')[0]; \r\n                            const auxLink = auxCheck[i].split('!***!')[2]?auxCheck[i].split('!***!')[2]:'';                        \r\n                            auxCheck[i] = auxCheck[i].split('!***!')[1] === 'true'? `${aux}!***!false!***!${auxLink}`:`${aux}!***!true!***!${auxLink}`;\r\n\r\n                            const data = dataFireStore;\r\n                            data.lists[data.list] = auxCheck;\r\n                            saveStateAndFirestore({ref, setState:setDataFireStore, newState:data});\r\n                                                        \r\n                        }}> \r\n                        {`${item.split('!***!')[0]}`}\r\n                        \r\n                        </Checkbox>\r\n                        <a href={item.split('!***!')[2]? item.split('!***!')[2]:''}>{item.split('!***!')[2]?'(link)':null}</a>\r\n                            \r\n                        </HStack>\r\n                        \r\n                        \r\n                    </div>\r\n                ):null}\r\n            </Box>\r\n\r\n\r\n            <Container centerContent={true}>\r\n            <HStack spacing={8}>\r\n              \r\n             \r\n            </HStack>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default List;","import {Box, Button} from \"@chakra-ui/react\";\r\nimport {Page} from  \"../dataStructure/page\";\r\n\r\n\r\ninterface  menu{\r\n    onClick: (pag:Page) => void,\r\n    text: string,\r\n    page: Page,\r\n    visibility: string;\r\n}\r\n\r\nconst Menu:React.FC<menu> = ({onClick, text, page, visibility}) => {\r\n    \r\n    return (\r\n      <>  \r\n        \r\n        <Box ml ='90%' mt='10px' >\r\n            <Button visibility={visibility as 'visible' | 'hidden'}  colorScheme=\"blue\" size=\"xs\" onClick={() => {\r\n                if(text === 'Log out')\r\n                    localStorage.setItem('email', '');\r\n                onClick(page);\r\n                \r\n                }}>\r\n                {text}\r\n            </Button> \r\n        </Box>\r\n\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Menu","import {Page} from  \"./dataStructure/page\";\nimport FirstPage from \"./pages/firstPage\";\nimport SignUp from \"./pages/sign_up\";\nimport SignIn from \"./pages/sign_in\";\nimport Dashboard from \"./pages/dash_board\";\nimport List from \"./pages/list\";\nimport Menu from \"./components/menu\";\nimport {useState} from 'react';\nimport { Container} from \"@chakra-ui/react\";\n\ninterface app {\n  whichPage: Page,\n}\n\nconst App:React.FC<app> = ({whichPage}) => {\n  const [state, setstate] = useState(whichPage);\n\n  let currentPage = <> </>;\n  let menu =   <Menu onClick={setstate} visibility={'visible'}  text='Back' page={Page.FirstPage}/>;\n  \n\n\n  if(state === Page.FirstPage){\n    menu = <Menu onClick={setstate} visibility={'hidden'}  text='Back' page={Page.FirstPage}/>;\n    currentPage = <FirstPage title='To-Do List' onChange={setstate} />\n  }\n  else if(state === Page.SignUp)\n    currentPage = <SignUp changePage={setstate}/>\n  else if(state === Page.SignIn)\n    currentPage = <SignIn changePage={setstate}/>\n  else if(state === Page.DashBoard){\n    menu =    <Menu onClick={setstate} visibility={'visible'}  text='Log out' page={Page.FirstPage}/>;\n    currentPage = <Dashboard title='Dashboard' onChange={setstate}/>\n  }\n  else if(state === Page.List){\n    menu = <> </>;\n    currentPage = <List title='List' onChange={setstate}/>\n  }\n  return (\n      <> \n          <Container centerContent={true} >\n            {menu}\n            {currentPage}\n          </Container>\n      </>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { extendTheme } from \"@chakra-ui/react\"\r\n\r\nexport const theme = extendTheme({\r\n\r\n  styles: {\r\n    global: {\r\n      // styles for the `body`\r\n      body: {\r\n        bg:'black',\r\n        opacity: 0.9,\r\n        color: \"white\",\r\n      },\r\n      \r\n    },\r\n  },\r\n\r\n\r\n  components: {\r\n    Container: {\r\n      // 1. We can update the base styles\r\n      baseStyle: {\r\n        fontWeight: \"bold\", // Normally, it is \"semibold\"\r\n      },\r\n    },\r\n    Input: {\r\n\r\n    },\r\n  },\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider} from \"@chakra-ui/react\";\nimport {Page} from  \"./dataStructure/page\";\nimport {theme} from \"./theme\";\n\nlet whichPage = Page.FirstPage;\n\n\n//localStorage.clear();\n\nif (!localStorage.getItem('email'))    \n        localStorage.setItem('email', '');\n    else if (localStorage.getItem('email') !== '') {\n        whichPage = Page.DashBoard;\n    }\n\n\n\nReactDOM.render(\n  <>\n  \n  <ChakraProvider theme={theme}>\n  <React.StrictMode>\n    <App whichPage={whichPage}/>\n  </React.StrictMode>\n  </ChakraProvider>\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}